name: üìù Procesar Canales Manuales

on:
  # Ejecutar solo manualmente
  workflow_dispatch:
    inputs:
      confirm:
        description: '¬øConfirmas el procesamiento? (escribe "si" para continuar)'
        required: true
        default: 'no'
        type: string
      max_channels:
        description: 'M√°ximo de canales a procesar (opcional, deja vac√≠o para todos)'
        required: false
        default: ''
        type: string

jobs:
  process-manual-channels:
    runs-on: ubuntu-latest
    
    # Solo ejecutar si se confirma
    if: github.event.inputs.confirm == 'si'
    
    steps:
    - name: üöÄ Checkout repository
      uses: actions/checkout@v4
    
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install google-api-python-client openpyxl
    
    - name: üìÅ Create directories
      run: |
        mkdir -p data logs cache
        echo "Directorios creados correctamente"
    
    - name: üîç Check files
      run: |
        echo "üìã Archivos disponibles:"
        ls -la
        
        if [ -f "CANALES ARGENTINOS FINALES.xlsx" ]; then
          echo "‚úÖ Archivo Excel encontrado"
        else
          echo "‚ùå Archivo Excel NO encontrado"
          exit 1
        fi
        
        if [ -f "add_manual_channels.py" ]; then
          echo "‚úÖ Script de procesamiento encontrado"
        else
          echo "‚ùå Script de procesamiento NO encontrado"
          exit 1
        fi
    
    - name: ü§ñ Process manual channels
      env:
        YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        API_KEY_2: ${{ secrets.API_KEY_2 }}
        MAX_CHANNELS: ${{ github.event.inputs.max_channels }}
      run: |
        echo "üöÄ Iniciando procesamiento de canales manuales..."
        echo "üìÖ Fecha: $(date)"
        
        # Crear script temporal
        cat > temp_process.py << 'ENDSCRIPT'
import sys
import os
sys.path.insert(0, '.')

try:
    from add_manual_channels import ManualChannelProcessor, load_channel_ids_from_file, Config
    from pathlib import Path
    
    if os.getenv('YOUTUBE_API_KEY'):
        Config.YOUTUBE_API_KEY = os.getenv('YOUTUBE_API_KEY')
    
    print('Buscando archivo Excel...')
    if Path('CANALES ARGENTINOS FINALES.xlsx').exists():
        print('Cargando canales desde Excel...')
        channel_ids = load_channel_ids_from_file('CANALES ARGENTINOS FINALES.xlsx')
        print(f'Canales cargados: {len(channel_ids)}')
        
        max_channels = os.getenv('MAX_CHANNELS', '')
        if max_channels and max_channels.isdigit():
            channel_ids = channel_ids[:int(max_channels)]
            print(f'Limitado a: {len(channel_ids)} canales')
        
        print('Iniciando procesamiento...')
        processor = ManualChannelProcessor(channel_ids)
        results = processor.process_all_channels()
        
        print(f'Completado: {results["added"]} a√±adidos, {results["rejected"]} rechazados')
    else:
        print('ERROR: Archivo Excel no encontrado')
        sys.exit(1)
        
except Exception as e:
    print(f'ERROR: {e}')
    import traceback
    traceback.print_exc()
    sys.exit(1)
ENDSCRIPT
        
        # Ejecutar el script
        python temp_process.py
    
    - name: üìä Check results
      id: check_results
      run: |
        if [ -f "data/streamers_argentinos.csv" ]; then
          lines=$(wc -l < data/streamers_argentinos.csv)
          echo "csv_lines=$lines" >> $GITHUB_OUTPUT
          echo "‚úÖ CSV actualizado con $lines l√≠neas"
          
          # Mostrar √∫ltimas l√≠neas a√±adidas
          echo "üìã √öltimos canales a√±adidos:"
          tail -n 5 data/streamers_argentinos.csv | while read line; do
            echo "   $line"
          done
        else
          echo "‚ùå No se gener√≥ el archivo CSV"
          echo "csv_lines=0" >> $GITHUB_OUTPUT
        fi
    
    - name: üìà Generate summary
      run: |
        echo "## üìä Resumen del Procesamiento" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Fecha:** $(date)" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "data/streamers_argentinos.csv" ]; then
          lines=$(wc -l < data/streamers_argentinos.csv)
          echo "**Total en CSV:** $lines l√≠neas" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìÅ Archivos generados:" >> $GITHUB_STEP_SUMMARY
        echo "- üìÑ CSV: \`data/streamers_argentinos.csv\`" >> $GITHUB_STEP_SUMMARY
        echo "- üìú Logs: Disponibles en artifacts" >> $GITHUB_STEP_SUMMARY
        
        # Buscar logs recientes
        if [ -d "logs" ] && [ "$(ls -A logs)" ]; then
          latest_log=$(ls -t logs/*.log | head -n 1)
          if [ -f "$latest_log" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìù √öltimas l√≠neas del log:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            tail -n 10 "$latest_log" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
        fi
    
    - name: üíæ Commit and push results
      if: steps.check_results.outputs.csv_lines != '0'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        
        # A√±adir archivos generados
        git add data/streamers_argentinos.csv || true
        git add cache/ || true
        git add logs/ || true
        
        # Commit solo si hay cambios
        if ! git diff --staged --quiet; then
          channels_processed="${{ github.event.inputs.max_channels }}"
          if [ -z "$channels_processed" ]; then
            channels_processed="todos"
          fi
          
          git commit -m "ü§ñ Canales manuales procesados ($channels_processed) - $(date +'%Y-%m-%d %H:%M')"
          git push
          echo "‚úÖ Cambios guardados en el repositorio"
        else
          echo "‚ÑπÔ∏è No hay cambios nuevos para guardar"
        fi
    
    - name: üìé Upload artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: processing-results-${{ github.run_id }}
        path: |
          logs/
          data/streamers_argentinos.csv
          cache/
        retention-days: 30
    
    - name: ‚úÖ Success notification
      if: success()
      run: |
        echo "üéâ ¬°Procesamiento completado exitosamente!"
        echo "üìÅ Los resultados est√°n guardados en el repositorio"
        echo "üìä Revisa el archivo 'data/streamers_argentinos.csv'"
    
    - name: ‚ùå Failure notification  
      if: failure()
      run: |
        echo "üí• Hubo un error en el procesamiento"
        echo "üìú Revisa los logs en los artifacts para m√°s detalles"
        echo "üîß Verifica que la API key est√© configurada correctamente"

  # Job que se ejecuta si no se confirma
  confirmation-required:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm != 'si'
    
    steps:
    - name: ‚ö†Ô∏è Confirmation required
      run: |
        echo "‚ùå Procesamiento cancelado"
        echo "Para ejecutar, ve a Actions > üìù Procesar Canales Manuales > Run workflow"
        echo "Y escribe 'si' en el campo de confirmaci√≥n"
        exit 1
